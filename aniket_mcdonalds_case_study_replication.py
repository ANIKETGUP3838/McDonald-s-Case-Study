# -*- coding: utf-8 -*-
"""Aniket-McDonalds CASE STUDY REPLICATION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Lhk2pirGswa6bR7UaRg5_c1acGAKuaa

## Replication of McDonalds Case Study in Python
## Presented by ANIKET

IMPORTING THE LIBRARIES OR DATA ANALYSIS AND VISUALIZATION
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

"""Importing the data by providing the path to McDonald's dataset"""

import pandas as pd
data = pd.read_csv("/content/mcdonalds.csv")

"""Exploring the first 5 elements of the dataset"""

data.head(10)

data.info()

data.isna().sum()
data.isnull().sum()

missing_values = data.isna().sum()
# missing_values = data.isnull().sum()
print(missing_values)

data['yummy'].value_counts()
data['convenient'].value_counts()
data['fattening'].value_counts()
data['greasy'].value_counts()
data['fast'].value_counts()
data['cheap'].value_counts()
data['tasty'].value_counts()
data['expensive'].value_counts()
data['healthy'].value_counts()
data['disgusting'].value_counts()

columns = ['yummy', 'convenient', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']

for col in columns:
    print(data[col].value_counts())

data["yummy"] = data["yummy"].replace({'Yes':1, 'No':0})
data["convenient"] = data["convenient"].replace({'Yes':1, 'No':0})
data["spicy"] = data["spicy"].replace({'Yes':1, 'No':0})
data["fattening"] = data["fattening"].replace({'Yes':1, 'No':0})
data["greasy"] = data["greasy"].replace({'Yes':1, 'No':0})
data["fast"] = data["fast"].replace({'Yes':1, 'No':0})
data["cheap"] = data["cheap"].replace({'Yes':1, 'No':0})
data["tasty"] = data["tasty"].replace({'Yes':1, 'No':0})
data["expensive"] = data["expensive"].replace({'Yes':1, 'No':0})
data["healthy"] = data["healthy"].replace({'Yes':1, 'No':0})
data["disgusting"] = data["disgusting"].replace({'Yes':1, 'No':0})

columns_to_replace = ['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']

replacement_dict = {'Yes': 1, 'No': 0}

for col in columns_to_replace:
    data[col] = data[col].replace(replacement_dict)

data.head()

data1 = data.iloc[:,0:11]
data1.head(10)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
sc_df = sc.fit_transform(data1)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

sc_df = sc.fit_transform(data1)

from sklearn.decomposition import PCA
import pandas as pd

pca = PCA(n_components=11)

princ_compo = pca.fit_transform(sc_df)

pca_df = pd.DataFrame(data=princ_compo, columns=["PCA1", "PCA2", "PCA3", "PCA4", "PCA5", "PCA6", "PCA7", "PCA8", "PCA9", "PCA10", "PCA11"])

pca_df.head(10)

sns.scatterplot(data=pca_df, x="PCA1", y="PCA2")

sns.heatmap(pca_df.corr(), annot=True, cmap='viridis')

import networkx as nx
import matplotlib.pyplot as plt

G = nx.Graph()

G.add_nodes_from([1, 2, 3, 4, 5])

G.add_edges_from([(1, 2), (1, 3), (2, 3), (2, 4), (3, 5)])

nx.draw(G, with_labels=True, node_color='pink', node_size=1500, font_size=12)

plt.show()

import numpy as np
import matplotlib.pyplot as plt

categories = ['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']
values = [3, 4, 2, 5, 4, 2, 5, 3, 4, 2, 5]
num_categories = len(categories)

angles = np.linspace(0, 2 * np.pi, num_categories, endpoint=False).tolist()
values += values[:1]
angles += angles[:1]

fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(polar=True))
ax.fill(angles, values, color='blue', alpha=0.25)
ax.plot(angles, values, color='blue', linewidth=2)

ax.set_xticks(angles[:-1])
ax.set_xticklabels(categories)
plt.show()

"""Extracting the Segments from the above extracted data processes"""

from sklearn.cluster import KMeans
from yellowbrick.cluster import KElbowVisualizer

kmeans_model = KMeans()
visualizer = KElbowVisualizer(kmeans_model, k=(1, 10))
visualizer.fit(sc_df)
visualizer.show()

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

distortions = []
K = range(1, 11)

for k in K:
    kmeans_model = KMeans(n_clusters=k)
    kmeans_model.fit(sc_df)
    distortions.append(kmeans_model.inertia_)

plt.figure(figsize=(8, 6))
plt.plot(K, distortions, 'bx-')
plt.xlabel('Number of Clusters')
plt.ylabel('Distortion Score')
plt.title('Distortion Score Elbow for KMeans Clustering')
plt.show()

from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
kmeans = KMeans(n_clusters=4)
kmeans_labels = kmeans.fit_predict(sc_df)
pca_df_kmeans = pd.concat([pca_df, pd.DataFrame({'cluster': kmeans_labels})], axis=1)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
sns.scatterplot(x="PCA1", y="PCA2", hue="cluster", data=pca_df_kmeans, palette=['green', 'red', 'blue', 'black'])
plt.title("KMeans Clustering")
plt.show()

kmeans = KMeans(4)
kmeans.fit_predict(sc_df)
pca_df_kmeans1 = pd.concat([data1,pd.DataFrame({'cluster':kmeans.labels_})], axis=1)

#sns.countplot(x ='cluster', data = pca_df_kmeans1, palette = "Set1")

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
sns.countplot(x='cluster', data=pca_df_kmeans1, palette='Set1')
plt.title('Count of Samples in Each Cluster')
plt.xlabel('Cluster')
plt.ylabel('Count')
plt.show()

"""Profiling the Segments from provided McDonald's datasets and providing the clustering to the following"""

cluster1 = pca_df_kmeans1[pca_df_kmeans1["cluster"]==0]
cluster2 = pca_df_kmeans1[pca_df_kmeans1["cluster"]==1]
cluster3 = pca_df_kmeans1[pca_df_kmeans1["cluster"]==2]
cluster4 = pca_df_kmeans1[pca_df_kmeans1["cluster"]==3]

plt.figure(figsize=(10, 6))
dia = sns.barplot(data=cluster1[['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']], ci=None)
plt.title('Analysis of Cluster 1')
plt.xlabel('Features')
plt.ylabel('Value')
plt.xticks(rotation=45)
plt.show()

cluster2.head()
dia = sns.barplot(data=cluster2[['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']], ci=None)
plt.title('Analysis of Cluster-2')
plt.show()

cluster3.head()
dia = sns.barplot(data=cluster3[['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']], ci=None)
plt.title('Analysis of Cluster-3')
plt.show()

cluster4.head()
dia = sns.barplot(data=cluster4[['yummy', 'convenient', 'spicy', 'fattening', 'greasy', 'fast', 'cheap', 'tasty', 'expensive', 'healthy', 'disgusting']], ci=None)
plt.title('Analysis of Cluster-4')
plt.show()

data_new= pd.concat([data,pd.DataFrame({'cluster':kmeans.labels_})],axis=1)
data_new.head(10)

data_new['VisitFrequency'].value_counts()

import matplotlib.pyplot as plt
visit_frequency_counts = data_new['VisitFrequency'].value_counts()

plt.figure(figsize=(8, 6))
visit_frequency_counts.plot(kind='bar', color='red')
plt.title('Visit Frequency Distribution')
plt.xlabel('Visit Frequency')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

data_new["VisitFrequency"]= data_new["VisitFrequency"].replace({'Never':0, 'Once a year':1, 'Every three months':2, 'Once a month':3, 'Once a week':4, 'Never':5, 'More than once a week':6})

import matplotlib.pyplot as plt

visit_frequency_counts = data_new['VisitFrequency'].value_counts()

plt.figure(figsize=(8, 6))
visit_frequency_counts.plot(kind='bar', color='darkblue')
plt.title('Visit Frequency Distribution')
plt.xlabel('Visit Frequency')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

data_new['Like'].value_counts()

import matplotlib.pyplot as plt

like_counts = data_new['Like'].value_counts()
plt.figure(figsize=(8, 6))
like_counts.plot(kind='bar', color='grey')
plt.title('Like Distribution')
plt.xlabel('Like')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

data_new["Like"]= data_new["Like"].replace({'I hate it!-5':0, '-4':1, '-3':2, '-2':3, '-1':4, '0':5, '+1':6, '+2':7, '+3':8, '+4':9, 'I love it!+5':10})

import matplotlib.pyplot as plt

like_counts = data_new['Like'].value_counts()

plt.figure(figsize=(8, 6))
like_counts.plot(kind='bar', color='black')
plt.title('Like Distribution')
plt.xlabel('Like')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

data_new['Gender'].value_counts()

import matplotlib.pyplot as plt

gender_counts = data_new['Gender'].value_counts()

plt.figure(figsize=(8, 6))
gender_counts.plot(kind='bar', color='yellow')
plt.title('Gender Distribution')
plt.xlabel('Gender')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

import matplotlib.pyplot as plt

gender_counts = data_new['Gender'].value_counts()

plt.figure(figsize=(8, 6))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', colors=['red', 'darkblue'])  # Adjust colors as needed
plt.title('Gender Distribution')
plt.show()

data_new["Gender"]= data_new["Gender"].replace({'Female':0, 'Male':1})

data_new.head(10)

from statsmodels.graphics.mosaicplot import mosaic
import matplotlib.pyplot as plt

# Plotting the mosaic plot
plt.figure(figsize=(10, 8))
mosaic(data_new, ['Like', 'cluster'], title='Like vs Cluster')
plt.show()

from statsmodels.graphics.mosaicplot import mosaic
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 8))
mosaic(data_new, ['Gender', 'cluster'], title='Gender vs. Cluster Mosaic Plot')
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

sns.boxplot(x=data_new['cluster'], y=data_new['Age'])

plt.title('Age Distribution across Clusters')
plt.xlabel('Cluster')
plt.ylabel('Age')

plt.show()

"""Select the Target Segments from the following Dataset"""

from sklearn.model_selection import train_test_split
X = data_new.drop(['cluster'],axis=1)
Y = data_new[['cluster']]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)

from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
data_new_encoded = data_new.apply(label_encoder.fit_transform)

X = data_new_encoded.drop(['cluster'], axis=1)
Y = data_new_encoded['cluster']

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

classifier = DecisionTreeClassifier(random_state=0)
model = classifier.fit(X_train, Y_train)

from sklearn import tree
dia = plt.figure(figsize=(25,20))
_ = tree.plot_tree(classifier, filled=True)

"""Customize the following according to the Marketing segmentation

Evaluate and train the model based on the above analysis
"""

classifier = DecisionTreeClassifier(criterion="entropy")
classifier.fit(X_train, Y_train)
Y_pred = classifier.predict(X_test)

import pickle
filename = 'classifier.pkl'
pickle.dump(classifier, open(filename, 'wb'))

loaded_model = pickle.load(open(filename, 'rb'))
result = loaded_model.score(X_test, Y_test)
print(result*100,'% Accuracy')